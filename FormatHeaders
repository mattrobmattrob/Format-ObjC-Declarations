#!/usr/bin/python

import argparse
import os
import re
import subprocess

####### FILE SEARCHING/MANIPULATION #######

def update_sections_with_matching_prefix(file, prefixes):
	for prefix in prefixes:
		pattern = re.compile("^" + prefix)

		valid_lines = []
		valid_line_numbers = []
		for i, line in enumerate(open(file)):
			if i - 1 in valid_line_numbers:
				# continue searching for end of section
				pass
			else:
				# process any matches in the middle/beginning of the file
				alphabetize_lines_in_file(valid_line_numbers, valid_lines, file)
				# reset state since we've ended a stretch of matching lines
				valid_line_numbers = []
				valid_lines = []

			for match in re.finditer(pattern, line):
				valid_line_numbers.append(i)
				valid_lines.append(line)
				# print 'Found on line %s: %s' % (i+1, match.groups())
		# process any matches at the end of the file
		alphabetize_lines_in_file(valid_line_numbers, valid_lines, file)


def alphabetize_lines_in_file(line_numbers, lines, file_name):
	if len(line_numbers) > 1:
		sorted_lines = sorted(lines, key=lambda s: s.lower())

		with open(file_name, 'r') as file:
			# read a list of lines into data
			data = file.readlines()

			# overwrite shifted lines
			i = 0
			for line_number in line_numbers:
				data[line_number] = sorted_lines[i]
				i = i + 1

			# and write everything back
			with open(file_name, 'w') as file:
				file.writelines(data)

####### GIT #######

# ensure current directory has `.git` directory
def isGitDirectory():
	return os.path.isdir(".git")

def changed_files_with_suffix(suffix):
	files = subprocess.check_output(['git', 'status', '--porcelain'])
	files = files.splitlines()
	modified_files = []
	for current_file in files:
		if None != re.search('^' + suffix, current_file):
			# split based on the variable spaces between suffix and file
			# use ftp://www.kernel.org/pub/software/scm/git/docs/git-status.html as guide
			file_name = re.split('^' + suffix + '[ M]' + ' ', current_file)[1]
			# work around files with spaces like: '"directory/name of file"'
			file_name = re.split("\"", file_name)
			for value in file_name:
				if value != '':
					modified_files.append(value)
	return modified_files

def get_modified_files():
	return changed_files_with_suffix('M')

def get_added_files():
	return changed_files_with_suffix('A')

def get_all_changed_files():
	files = get_modified_files() + get_added_files()
	return files

def get_branch_diff_files(baseBranch, compareBranch):
	files = subprocess.check_output(['git', 'diff', baseBranch + '...' + compareBranch, '--name-only'])
	files = files.splitlines()
	return files

####### ARGUMENT PARSING #######

class BaseBranchAction(argparse.Action):
	def __call__(self, parser, namespace, values, option_string=None):
		if namespace.compareBranch == "":
			parser.error('Missing compare branch, required when specifying a base branch')
		else:
			namespace.baseBranch = values

####### MAIN #######

def main():
	parser = argparse.ArgumentParser(description="Alphabetize prefix matching sections in checked in, changed files or branch differences based on default prefixes or overridden values. Defaults to alphabetizing added and modified files.")
	parser.add_argument('--base', dest='baseBranch', default="", action=BaseBranchAction, required=False, help='base branch for the diff, requires `--compare`')
	parser.add_argument('--compare', dest='compareBranch', default="", action='store', required=False, help='compare branch for the diff')
	parser.add_argument('--prefixes', dest='prefixes', nargs='+', default=[], action='append', required=False, help='prefixes to scan for alphabetizing')
	args = parser.parse_args()

	# grab parameters (base and compare branches along with potential prefix override)
	baseBranch = args.baseBranch
	compareBranch = args.compareBranch
	# Assume Objective-C standard, if empty list
	if args.prefixes == []:
		prefixes = ["@import", "@class", "#import", "@protocol"]
	else:
		# these will be passed as array of array of strings
		prefixes = args.prefixes[0]

	# Block alphabetizing because no `.git` folder
	if False == isGitDirectory():
		print "This directory doesn't contain a `.git` directory!"

	# Alphabetize branch diff files
	elif compareBranch != "":
		# Assume 'origin/master' if 'base' not-specified
		if baseBranch == "":
			baseBranch = 'origin/master'

		# Get git branch diff files
		diff_files = get_branch_diff_files(baseBranch, compareBranch)
		# alphabetize all matching sections of all files
		for diff_file in diff_files:
			update_sections_with_matching_prefix(diff_file, prefixes)

	# Alphabetize git checked in and changed files
	else:
		# Git changed files based alphabetize
		changed_files = get_all_changed_files()
		# alphabetize all matching sections of all files
		for changed_file in changed_files:
			update_sections_with_matching_prefix(changed_file, prefixes)

main()
